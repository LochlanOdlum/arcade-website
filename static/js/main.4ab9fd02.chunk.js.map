{"version":3,"sources":["components/TTT/TicTacButton.js","components/C4/C4Button.js","components/Snake/SnakeButton.js","components/General/ErrorNotif.js","components/Chess/ChessButton.js","components/GameSelection.js","components/General/SmallHeader.js","components/TTT/TicTacSelectMode.js","components/TTT/TicTacPlayerBox.js","gameLogic/game.js","components/TTT/TicTacBoard.js","gameLogic/TicTac.js","hooks/useForceUpdate.js","hooks/useTicTac.js","components/TTT/TicTacOfflineFriendPage.js","components/General/LoadingSpinner.js","components/General/GreyBackground.js","components/General/LoadingOverlay.js","components/TTT/TicTacOnlinePage.js","components/TTT/TicTacOfflineBotPage.js","components/TTT/TicTacPage.js","components/C4/C4SelectMode.js","components/C4/C4PlayerBox.js","components/C4/C4Board.js","gameLogic/C4.js","hooks/useC4.js","components/C4/C4OfflinePage.js","components/C4/C4OfflineBotPage.js","components/C4/C4OnlinePage.js","components/C4/C4Page.js","gameLogic/Snake.js","hooks/useSnake.js","hooks/useSnakeSwipeArrowTurn.js","components/Snake/SnakeBoard.js","components/Snake/SnakePage.js","components/App.js","index.js"],"names":["TicTacButton","className","to","src","alt","C4Button","SnakeButton","ErrorNotif","text","ChessButton","useState","displayError","setDisplayError","onClick","setTimeout","renderError","GameSelection","SmallHeader","href","TicTacSelectMode","props","currentNick","setCurrentNick","value","onChange","event","target","length","placeholder","id","setOnlineNick","setGameType","TicTacPlayerBox","side","name","game","playerType","iconName","iconClassName","borderClass","currentPlayer","GameStatus","preGame","Symbol","inGame","draw","won","Game","players","winner","status","leave","player","goToNextPlayer","indexOfPlayer","indexOf","splice","setWinner","setCurrentPlayer","nextPlayerIndex","this","confettiConfig","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","TicTacBoard","onSquareClick","myPlayer","shouldRenderConfetti","setShouldRenderConfetti","useEffect","renderConfettiLogic","x","y","winningSquares","coords","isSquareWinning","squareWinClass","undefined","winX","winY","squareValue","playerOfSquare","find","p","board","map","column","key","active","config","renderBoard","lastResults","result","index","renderScore","TicTacGame","Error","ties","lastResultsAmount","start","checkForDraw","nullCount","checkForWinAtPoint","currentWinningSquares","playerIDAtPoint","direction","matchCount","directionMagnitude","currentX","currentY","bestMove","playerSelf","playerOther","bestScore","Infinity","boardClone","score","minimax","isMaximising","depth","randomInt","Math","random","takeTurn","isGameWon","push","playAgain","otherPlayer","startingPlayer","useForceUpdate","React","useReducer","displayGame","useTicTac","forceUpdate","g","TicTac","TicTacOfflineFriendPage","error","console","LoadingSpinner","GreyBackground","children","LoadingOverlay","floor","socket","TicTacOnlinePage","connected","setConnected","matchFound","setMatchFound","io","connect","emit","on","updatedPlayerSelf","findIndex","updatedPlayerOther","startOnlineGame","botGameConfig","TicTacOfflineBotPage","log","bestBotMove","TicTacPage","onlineNick","gameType","C4SelectMode","type","e","nick","C4Board","onColumnClick","renderTileValue","playerIDAtTile","playerAtTile","winningTiles","C4Game","Array","fill","lowestY","currentWinningTiles","alpha","beta","winningPlayer","useC4","C4","offlinePlayers","C4OfflinePage","C4OfflineBotPage","C4OnlinePage","playersData","C4Page","SnakeGameStatus","endedGame","SnakeGame","boardWidth","boardHeight","cooldown","newGameSetup","debouncedDirection","moveCoolDown","isPaused","position","food","generateID","startFood","newFoodPos","shiftSnake","currentHead","newHead","currentTail","foodX","foodY","highScore","newFood","turn","firstRender","useSnake","moveLoop","togglePause","useSnakeSwipeArrowTurn","onArrowClick","keyCode","document","addEventListener","evt","firstTouch","touches","originalEvent","getTouches","xDown","clientX","yDown","clientY","xUp","yUp","xDiff","yDiff","abs","body","preventDefault","passive","onkeydown","removeEventListener","SnakeBoard","gameStarting","setGameStarting","countdown","setCountdown","isPreGame","isGameOver","isInGame","snakeClass","onkeyup","code","handleBoardClick","renderCountDown","columnx","indexX","celly","indexY","SnakePage","App","exact","path","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.4ab9fd02.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../../styling/General/GameButton.css\";\nimport {Link} from 'react-router-dom';\n\nconst TicTacButton = () => {\n\n  return (\n    <>\n      <Link className=\"nostyle\" to=\"/ttt\">\n        <div className=\"game-button\">\n          <div className=\"icon\">\n            <img className=\"icon\" src=\"/images/ttt-board-invert.png\" alt=\"tic tac toe board\" />\n          </div>\n\n          <div className=\"text\">\n            <h2 className=\"game-button-title\">Tic-Tac-Toe</h2>\n          </div>\n        </div>\n      </Link>\n    </>\n  );\n};\n\nexport default TicTacButton;\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\n\nconst C4Button = () => {\n  return (\n    <>\n      <Link className=\"nostyle\" to=\"/connect4\">\n        <div className=\"game-button\">\n          <div className=\"icon\">\n            <img className=\"icon\" src=\"/images/connect4.png\" alt=\"Connect 4\" />\n          </div>\n\n          <div className=\"text\">\n            <h2 className=\"game-button-title\">Connect 4</h2>\n          </div>\n        </div>\n      </Link>\n    </>\n  );\n};\n\n\nexport default C4Button;","import React from \"react\";\nimport \"../../styling/General/GameButton.css\";\nimport { Link } from \"react-router-dom\";\n\nconst SnakeButton = () => {\n  return (\n    <>\n      <Link className=\"nostyle\" to=\"/snake\">\n        <div className=\"game-button\">\n          <div className=\"icon\">\n            <img\n              className=\"icon\"\n              src=\"/images/snake.png\"\n              alt=\"snake game\"\n            />\n          </div>\n\n          <div className=\"text\">\n            <h2 className=\"game-button-title\">Snake</h2>\n          </div>\n        </div>\n      </Link>\n    </>\n  );\n};\n\nexport default SnakeButton;\n","import React from \"react\";\nimport \"../../styling/General/ErrorNotif.css\";\n\nconst ErrorNotif = ({ text }) => {\n  return (\n    <div className=\"error-block\">\n      <div className=\"error-content\">\n        <span className=\"error-symbol\">\n          <div className=\"error-circle\" />\n          <div className=\"error-cross error-cross-up\" />\n          <div className=\"error-cross error-cross-down\" />\n        </span>\n\n        <span className=\"error-text\">\n          <span className=\"ohno\">Oh no!</span> {text}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default ErrorNotif;\n","import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport ErrorNotif from \"../General/ErrorNotif\";\n\nconst ChessButton = () => {\n  const [displayError, setDisplayError] = useState(false);\n\n\n  const onChessClick = () => {\n    if (!displayError) {\n      setDisplayError(true);\n      setTimeout(() => {\n        setDisplayError(false);\n      }, 5000);\n    }\n  };\n\n  const renderError = () => {\n    if (displayError) {\n      return <ErrorNotif text=\"Chess is currently under development!\" />;\n    }\n  };\n\n  return (\n    <>\n      <Link className=\"nostyle\" to=\"/\">\n        <div className=\"game-button\">\n          <div className=\"icon\">\n            <img onClick={onChessClick} className=\"icon\" src=\"/images/chess12.png\" alt=\"chess 4 board\" />\n            {renderError()}\n          </div>\n\n          <div className=\"text\">\n            <h2 className=\"game-button-title\">Chess</h2>\n          </div>\n        </div>\n      </Link>\n    </>\n  );\n};\n\n\nexport default ChessButton;","import React from \"react\";\nimport TicTacButton from \"./TTT/TicTacButton\";\nimport C4Button from \"./C4/C4Button\";\nimport \"../styling/GameSelection.css\";\nimport SnakeButton from \"./Snake/SnakeButton\";\nimport ChessButton from \"./Chess/ChessButton\";\n\nconst GameSelection = () => {\n  return (\n    <div className=\"game-block\">\n      <div className=\"game-grid-container\">\n        <TicTacButton />\n        <C4Button/>\n        <SnakeButton />\n        <ChessButton/>\n      </div>\n    </div>\n  );\n};\n\nexport default GameSelection;\n","import React from 'react';\nimport '../../styling/TTT/TicTacHeader.css';\n\nconst SmallHeader = () => {\n\n  return (\n    <div className=\"ttt-header\">\n              <span className=\"ttt-name\">\n                <a className=\"nostyle header-link\" href='/'>Arcade || Lochlan.cc</a>\n              </span>\n    </div>\n  );\n};\n\nexport default SmallHeader;","import React, { useState } from \"react\";\nimport \"../../styling/TTT/TicTacSelectMode.css\";\nimport ErrorNotif from \"../General/ErrorNotif\";\n\n\nconst TicTacSelectMode = props => {\n  const [currentNick, setCurrentNick] = useState(\"\");\n  const [displayError, setDisplayError] = useState(false);\n\n\n  const onInputChange = event => {\n    if (event.target.value.length < 12) {\n      setCurrentNick(event.target.value);\n    }\n  };\n\n  const onOnlineClick = () => {\n\n    if (!currentNick && !displayError) {\n      setDisplayError(true);\n      setTimeout(() => {\n        setDisplayError(false);\n      }, 5000);\n    } else if (!currentNick) {\n    } else {\n      props.setOnlineNick(currentNick);\n      props.setGameType(\"online\");\n    }\n  };\n\n  const onOfflineFriendClick = () => {\n    props.setGameType(\"offlineFriend\");\n  };\n  const onOfflineBotClick = () => {\n    props.setGameType(\"offlineBot\");\n  };\n\n  const renderError = () => {\n    if (displayError) {\n      return <ErrorNotif text=\"You must enter a nickname to play Online!\" />;\n    }\n  };\n\n  return (\n    <>\n      {renderError()}\n      <div className=\"ttt-pop-up\">\n        <div className=\"ttt-pop-up-container\">\n          <div className=\"ttt-pop-up-title\">\n            <span className=\"ttt-title-yellow\">T</span><span className=\"ttt-title-red\">I</span><span className=\"ttt-title-yellow\">C</span>\n            <span className=\"ttt-title-red\"> T</span><span className=\"ttt-title-yellow\">A</span><span className=\"ttt-title-red\">C </span>\n            <span className=\"ttt-title-yellow\">T</span><span className=\"ttt-title-red\">O</span><span className=\"ttt-title-yellow\">E</span></div>\n\n          <div className=\"ttt-pop-up-center-block\">\n            <input\n              value={currentNick}\n              onChange={onInputChange}\n              className=\"ttt-nickname\"\n              placeholder=\"Nick\"\n            />\n\n            <div\n              className=\"ttt-play\"\n              id=\"ttt-play-online\"\n              onClick={onOnlineClick}\n            >\n              Play Online!\n            </div>\n\n            <div className=\"ttt-offline-container\">\n              or{\" \"}\n              <div\n                className=\"ttt-play\"\n                id=\"ttt-play-offline\"\n                onClick={onOfflineFriendClick}\n              >\n                Offline vs Friend!\n              </div>\n            </div>\n\n            <div className=\"ttt-offline-container\">\n              <div\n                className=\"ttt-play\"\n                id=\"ttt-play-offlineBot\"\n                onClick={onOfflineBotClick}\n              >\n                Offline vs Bot!\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default TicTacSelectMode;\n","import React from \"react\";\nimport \"../../styling/TTT/TicTacPlayerBox.css\";\nimport \"../../styling/General/PlayerBox.css\";\n\nconst TicTacPlayerBox = ({ side, name, game, id, value, playerType }) => {\n  const iconName = playerType === 'user' ? '/images/user-icon.svg' : '/images/bot-icon.svg';\n  const iconClassName = playerType === 'user' ? 'user' : 'bot';\n\n  const borderClass = id === game.currentPlayer.id ? \" player-box-border\" : \"\";\n  const renderMiniSquareValue = () => {\n    if (value === \"x\") {\n      return (\n        <img\n          className=\"ttt-player-box-icon\"\n          alt=\"small red cross\"\n          src=\"/images/ttt-cross.svg\"\n        />\n      );\n    }\n\n    return (\n      <img\n        className=\"ttt-player-box-icon\"\n        alt=\"small yellow circle\"\n        src=\"/images/ttt-circle.svg\"\n      />\n    );\n  };\n\n  return (\n    <span className={`ttt player-box-container ${side}${borderClass}`}>\n      <span className={`${iconClassName}-icon-circle`}>\n        <img className={`svg-${iconClassName}-icon`} alt=\"user icon\" src={iconName} />\n      </span>\n      <div className=\"player-box-name\">{name}</div>\n      {renderMiniSquareValue()}\n    </span>\n  );\n};\n\nexport default TicTacPlayerBox;\n","export const GameStatus = {\n  preGame: Symbol(\"preGame\"),\n  inGame: Symbol(\"inGame\"),\n  draw: Symbol(\"draw\"),\n  won: Symbol(\"won\")\n};\n\nexport default class Game {\n  // Shared properties among all game types\n  players;\n  winner = null;\n  status = GameStatus.preGame;\n  currentPlayer;\n\n  constructor(players = []) {\n    this.players = players;\n    this.currentPlayer = players[0];\n\n  }\n\n\n  leave = player => {\n    if (player === this.currentPlayer) {\n      this.goToNextPlayer();\n    }\n\n    const indexOfPlayer = this.players.indexOf(player);\n    this.players.splice(indexOfPlayer, 1);\n\n    if (this.players.length === 1) {\n      this.setWinner(this.players[0]);\n    }\n  };\n\n  setWinner = player => {\n    this.winner = player;\n  };\n\n  setCurrentPlayer = player => {\n    this.currentPlayer = player;\n  };\n\n  goToNextPlayer = () => {\n    const currentPlayerIndex = this.players.indexOf(this.currentPlayer);\n    const nextPlayerIndex = (currentPlayerIndex + 1) % this.players.length;\n    this.setCurrentPlayer(this.players[nextPlayerIndex]);\n  };\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"../../styling/TTT/TicTacBoard.css\";\nimport TicTacPlayerBox from \"./TicTacPlayerBox\";\nimport { GameStatus } from \"../../gameLogic/game\";\nimport Confetti from \"react-dom-confetti\";\n\nconst confettiConfig = {\n  angle: 90,\n  spread: \"360\",\n  startVelocity: \"35\",\n  elementCount: \"70\",\n  dragFriction: 0.12,\n  duration: 3000,\n  stagger: \"1\",\n  width: \"13px\",\n  height: \"13px\",\n  perspective: \"500px\",\n  colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n};\n\nconst TicTacBoard = ({ game, onSquareClick, myPlayer }) => {\n  const [shouldRenderConfetti, setShouldRenderConfetti] = useState(false);\n\n  useEffect(() => {\n    if (\n      game.status === GameStatus.won &&\n      myPlayer?.value === game.winner.value\n    ) {\n      setShouldRenderConfetti(true);\n    }\n    if (game.status === GameStatus.inGame) {\n      setShouldRenderConfetti(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [game.status]);\n\n  const renderConfettiLogic = (x, y) => {\n    const isSquareWinning = () => {\n      for (let coords of game.winningSquares) {\n        if (coords[0] === x && coords[1] === y) {\n          return true;\n        }\n      }\n    };\n\n    return shouldRenderConfetti && isSquareWinning();\n\n  };\n\n  const renderBoard = () => {\n    if (game.board) {\n      return game.board.map((column, x) => (\n        <div key={`column-${x}`} className={`board-column ${x}`}>\n          {column.map((id, y) => (\n            <div\n              key={`square-${y}`}\n              className={`board-square ${squareWinClass(x, y)} x-${x} y-${y}`}\n              onClick={() => onSquareClick(x, y)}\n            >\n              <Confetti\n                active={renderConfettiLogic(x, y)}\n                config={confettiConfig}\n              />\n              {squareValue(id, x, y)}\n            </div>\n          ))}\n        </div>\n      ));\n    }\n  };\n\n  const squareWinClass = (x, y) => {\n    if (game.status === undefined) {\n      return \"\";\n    }\n    for (const [winX, winY] of game.winningSquares) {\n      if (x === winX && y === winY) {\n        if (game.winner.value === myPlayer.value) {\n          return \"square-won\";\n        }\n        return \"square-loss\";\n      }\n    }\n    return \"\";\n  };\n\n  const squareValue = (id, x, y) => {\n    if (!id) {\n      return;\n    }\n    const playerOfSquare = game.players.find(p => p.id === id);\n\n    if (playerOfSquare.value === \"x\") {\n      return (\n        <>\n          <div className={`cross cross-up cross-${squareWinClass(x, y)}`} />\n          <div className={`cross cross-down cross-${squareWinClass(x, y)}`} />\n        </>\n      );\n    }\n    if (playerOfSquare.value === \"o\") {\n      return (\n        <>\n          <div\n            className={`circle circle-inner circle-${squareWinClass(x, y)}`}\n          />\n          <div\n            className={`circle circle-outer circle-${squareWinClass(x, y)}`}\n          />\n        </>\n      );\n    }\n  };\n\n  const renderScore = () => {\n    return game.lastResults?.map((result, index) => {\n      if (result === \"tie\") {\n        return <img key={index} className=\"ttt-tie-icon ttt-score-icon\" alt=\"small tie\" src=\"/images/tie.svg\" />;\n      }\n      if (result.value === \"x\") {\n        return (\n            <img key={index} className=\"ttt-score-icon ttt-score-cross\" alt=\"small red cross\" src=\"/images/ttt-cross.svg\" />\n\n        );\n      }\n      return (\n          <img key={index} className=\"ttt-score-icon ttt-score-circle\" alt=\"small yellow circle\" src=\"/images/ttt-circle.svg\" />\n      );\n    });\n  };\n\n  return (\n    <div className=\"ttt-board-block\">\n      <div className=\"board-container\">\n        <TicTacPlayerBox\n          game={game}\n          name={game.players[0].name}\n          id={game.players[0].id}\n          value={game.players[0].value}\n          playerType={game.players[0].playerType}\n          side=\"left\"\n        />\n        <div className=\"break\" />\n        <div className=\"board\">{renderBoard()}</div>\n        <TicTacPlayerBox\n          game={game}\n          name={game.players[1].name}\n          id={game.players[1].id}\n          value={game.players[1].value}\n          playerType={game.players[1].playerType}\n          side=\"right\"\n        />\n      </div>\n\n      <div className=\"score-container\">\n        {renderScore()}\n      </div>\n    </div>\n  );\n};\n\nexport default TicTacBoard;\n","import Game, { GameStatus } from \"./game\";\n\nexport default class TicTacGame extends Game {\n  board = [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null]\n  ];\n  ties = 0;\n  winningSquares = [\n    [null, null],\n    [null, null],\n    [null, null]\n  ];\n  lastResults = [];\n  lastResultsAmount = 7;\n\n  constructor(players) {\n    if (players.length > 2) {\n      throw new Error(\"You have too many friends\");\n    }\n\n    super(players);\n\n    this.startingPlayer = this.players.find(p => p.value === \"x\");\n    this.setCurrentPlayer(this.startingPlayer);\n  }\n\n  start = () => {\n    this.status = GameStatus.inGame;\n  };\n\n  checkForDraw = board => {\n    if (this.status === GameStatus.won) {\n      return false;\n    }\n    let nullCount = 0;\n\n    for (const column of board) {\n      for (const squareID of column) {\n        if (squareID === null) {\n          nullCount += 1;\n        }\n      }\n    }\n    return nullCount === 0;\n  };\n\n  checkForWinAtPoint = (board, [x, y]) => {\n    const searchDirections = [\n      [-1, 0],\n      [-1, -1],\n      [0, -1],\n      [-1, 1]\n    ];\n    let currentWinningSquares = [\n      [x, y],\n      [null, null],\n      [null, null]\n    ];\n\n    const playerIDAtPoint = board[x][y];\n\n    if (!playerIDAtPoint) {\n      return [\n        false,\n        [\n          [null, null],\n          [null, null],\n          [null, null]\n        ]\n      ];\n    }\n\n    for (const direction of searchDirections) {\n      let matchCount = 1;\n\n      for (const directionMagnitude of [1, -1]) {\n        let currentX = x + direction[0] * directionMagnitude;\n        let currentY = y + direction[1] * directionMagnitude;\n\n        while (\n          currentX >= 0 &&\n          currentX < board.length &&\n          currentY >= 0 &&\n          currentY < board[0].length &&\n          board[currentX][currentY] === playerIDAtPoint\n        ) {\n          currentWinningSquares[matchCount] = [currentX, currentY];\n          matchCount += 1;\n\n          currentX += direction[0] * directionMagnitude;\n          currentY += direction[1] * directionMagnitude;\n        }\n      }\n\n      if (matchCount >= 3) {\n        return [true, currentWinningSquares];\n      }\n    }\n    return [\n      false,\n      [\n        [null, null],\n        [null, null],\n        [null, null]\n      ]\n    ];\n  };\n\n  bestMove = playerSelf => {\n    if (this.status !== GameStatus.inGame) {\n      throw new Error(\"Can't find best move of game if it isn't in progress\");\n    }\n    if (this.currentPlayer.id !== playerSelf.id) {\n      throw new Error(\n        \"It isn't this players turn so cannot find their best move. Please wait your turn\"\n      );\n    }\n\n    let bestMove = [null, null];\n    const playerOther = this.players.find(p => p.id !== playerSelf.id);\n    let bestScore = -Infinity;\n\n    let boardClone = [\n      [null, null, null],\n      [null, null, null],\n      [null, null, null]\n    ];\n    //Loop to clone board to boardClone\n    for (let x = 0; x < this.board.length; x++) {\n      for (let y = 0; y < this.board[x].length; y++) {\n        boardClone[x][y] = this.board[x][y];\n        if (this.board[x][y] === null) {\n        }\n      }\n    }\n\n    //This loops through all possible moves and gets value of game from those moves using minimax function\n    //Once done it will set best move to the move with the highest game value, if a tie then will chose first square\n    //that it loops through of the ties.\n    for (let x = 0; x < boardClone.length; x++) {\n      for (let y = 0; y < boardClone[x].length; y++) {\n        //If square is empty (so its a possible move)\n        if (boardClone[x][y] === null) {\n          boardClone[x][y] = playerSelf.id;\n\n          let score;\n          if (this.checkForWinAtPoint(boardClone, [x, y])[0]) {\n            score = 10;\n          } else if (this.checkForDraw(boardClone)) {\n            score = 0;\n          } else {\n            score = this.minimax(boardClone, false, 2, playerSelf, playerOther);\n          }\n\n          if (score > bestScore) {\n            bestScore = score;\n            bestMove = [x, y];\n          }\n          //Sets boardClone square to null after checking value of game by playing at that square, cleaning up.\n          boardClone[x][y] = null;\n        }\n      }\n    }\n\n    return bestMove;\n  };\n\n  minimax = (board, isMaximising, depth, playerSelf, playerOther) => {\n    if (depth > 2) {\n      const randomInt = Math.random();\n      if (randomInt < 0.1) {\n        // console.log('returned 0');\n        return randomInt -1;\n      }\n    }\n\n    if (depth === 2) {\n      const randomInt = Math.random();\n      if (randomInt < 0.05) {\n        return randomInt -1;\n      }\n    }\n    //isMaximising means it's playerSelf's turn to move, trying to get largest value of game (as value = gain)\n    if (isMaximising) {\n      let bestScore = -Infinity;\n      for (let x = 0; x < board.length; x++) {\n        for (let y = 0; y < board[x].length; y++) {\n          if (board[x][y] === null) {\n            board[x][y] = playerSelf.id;\n\n            let score;\n            if (this.checkForWinAtPoint(board, [x, y])[0]) {\n              score = 10 - depth;\n            } else if (this.checkForDraw(board)) {\n              score = 0;\n            } else {\n              score = this.minimax(\n                board,\n                false,\n                depth + 1,\n                playerSelf,\n                playerOther\n              );\n            }\n\n            if (score > bestScore) {\n              bestScore = score;\n            }\n            board[x][y] = null;\n          }\n        }\n      }\n      return bestScore;\n    }\n    if (!isMaximising) {\n      let bestScore = Infinity;\n      for (let x = 0; x < board.length; x++) {\n        for (let y = 0; y < board[x].length; y++) {\n          if (board[x][y] === null) {\n            board[x][y] = playerOther.id;\n\n            let score;\n            if (this.checkForWinAtPoint(board, [x, y])[0]) {\n              //If there is a win after playerOther takes turn then it must be a loss for playerSelf, so -1.\n              score = -10 + depth;\n            } else if (this.checkForDraw(board)) {\n              score = 0;\n            } else {\n              score = this.minimax(\n                board,\n                true,\n                depth + 1,\n                playerSelf,\n                playerOther\n              );\n            }\n\n            if (score < bestScore) {\n              bestScore = score;\n            }\n            board[x][y] = null;\n          }\n        }\n      }\n      return bestScore;\n    }\n  };\n\n  takeTurn = (player, [x, y]) => {\n    if (this.status !== GameStatus.inGame) {\n      throw new Error(\"The game is not currently active\");\n    }\n\n    if (player.id !== this.currentPlayer.id) {\n      throw new Error(\"Whoops! It's not your turn yet\");\n    }\n\n    if (this.board[x][y]) {\n      throw new Error(\"Someone has already moved there\");\n    }\n\n    this.board[x][y] = player.id;\n\n    const [isGameWon, winningSquares] = this.checkForWinAtPoint(this.board, [\n      x,\n      y\n    ]);\n\n    if (isGameWon) {\n      player.score += 1;\n\n      this.winner = player;\n      this.status = GameStatus.won;\n      this.winningSquares = winningSquares;\n\n      this.lastResults.push(this.winner);\n      if (this.lastResults.length > this.lastResultsAmount) {\n        this.lastResults.splice(\n          0,\n          this.lastResults.length - this.lastResultsAmount\n        );\n      }\n    }\n\n    const isGameDrawn = this.checkForDraw(this.board);\n    if (isGameDrawn) {\n      this.ties += 1;\n      this.status = GameStatus.draw;\n\n      this.lastResults.push(\"tie\");\n      if (this.lastResults.length > this.lastResultsAmount) {\n        this.lastResults.splice(\n          0,\n          this.lastResults.length - this.lastResultsAmount\n        );\n      }\n    }\n\n    //Prevents going to next player if game is won or drawn\n    if (this.status === GameStatus.won || this.status === GameStatus.draw) {\n      return;\n    }\n\n    this.goToNextPlayer();\n  };\n\n  playAgain = () => {\n    this.winningSquares = [\n      [null, null],\n      [null, null],\n      [null, null]\n    ];\n    this.winner = null;\n    this.status = GameStatus.inGame;\n    this.board = [\n      [null, null, null],\n      [null, null, null],\n      [null, null, null]\n    ];\n    const otherPlayer = this.players.find(p => p.id !== this.startingPlayer.id);\n\n    this.setCurrentPlayer(otherPlayer);\n    this.startingPlayer = otherPlayer;\n  };\n}\n","import React from 'react';\n\nconst useForceUpdate = () => {\n  return React.useReducer(() => ({}))[1];\n};\n\nexport default useForceUpdate;","import TicTac from \"../gameLogic/TicTac\";\nimport useForceUpdate from \"./useForceUpdate\";\n\nexport const displayGame = {\n  board: [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null]\n  ],\n  ties: 0,\n  players: [\n    { id: \"1\", name: \"Player 1\", value: \"x\", score: 0, playerType: 'user' },\n    { id: \"0\", name: \"Player 2\", value: \"o\", score: 0, playerType: 'user'}\n  ],\n  get currentPlayer() {\n    return this.players[0];\n  }\n};\n\nlet game = {};\n\nconst useTicTac = () => {\n\n  const forceUpdate = useForceUpdate();\n\n  const setCurrentPlayer = player => {\n    game.setCurrentPlayer(player);\n    forceUpdate();\n  };\n\n  const start = players => {\n    let g = new TicTac(players);\n    g.start();\n    game = g;\n    forceUpdate();\n  };\n\n  const takeTurn = (player, [x, y]) => {\n    game.takeTurn(player, [x, y]);\n    forceUpdate();\n  };\n\n  const bestMove = (player) => {\n    return game.bestMove(player);\n  };\n\n  const leave = player => {\n    game.leave(player);\n    forceUpdate();\n  };\n\n  const playAgain = () => {\n    game.playAgain();\n    forceUpdate();\n  };\n\n  return {\n    start,\n    takeTurn,\n    bestMove,\n    setCurrentPlayer,\n    leave,\n    playAgain,\n    winningSquares: game?.winningSquares,\n    lastResults: game?.lastResults,\n    ties: game?.ties,\n    board: game?.board,\n    players: game?.players,\n    winner: game?.winner,\n    status: game?.status,\n    currentPlayer: game?.currentPlayer,\n    startingPlayer: game?.startingPlayer\n  };\n};\n\nexport default useTicTac;\n","import React, { useEffect } from \"react\";\nimport SmallHeader from \"../General/SmallHeader\";\nimport TicTacBoard from \"./TicTacBoard\";\nimport useTicTac, { displayGame } from \"../../hooks/useTicTac\";\nimport { GameStatus } from \"../../gameLogic/game\";\n\nconst TicTacOfflineFriendPage = () => {\n  const game = useTicTac();\n\n  const startGame = () => {\n    game.start(displayGame.players);\n  };\n\n  useEffect(startGame, []);\n\n  const renderGame = () => {\n    if (game.status === undefined) {\n      return displayGame;\n    }\n    return game;\n  };\n\n  const onSquareClick = (x, y) => {\n    if (game.status === GameStatus.draw || game.status === GameStatus.won) {\n      game.playAgain();\n    } else {\n      try {\n        game.takeTurn(game.currentPlayer, [x, y]);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <>\n      <SmallHeader />\n      <TicTacBoard game={renderGame()} onSquareClick={onSquareClick} myPlayer={game.currentPlayer} />\n    </>\n  );\n};\n\nexport default TicTacOfflineFriendPage;\n","import React from 'react';\nimport '../../styling/General/LoadingSpinner.css';\n\nconst LoadingSpinner = () => {\n  return (\n    <div className=\"lds-roller\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;","import React from 'react';\nimport '../../styling/General/GreyBackground.css'\n\nconst GreyBackground = (props) => {\n  return (\n    <div className=\"background-screen\">{props.children}</div>\n  )\n};\n\nexport default GreyBackground;","import React from \"react\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport GreyBackground from \"./GreyBackground\";\nimport '../../styling/General/LoadingOverlay.css'\n\nconst LoadingOverlay = ({text}) => {\n  return (\n    <>\n      <GreyBackground />\n      <div className=\"loading-overlay-centre\">\n        <LoadingSpinner />\n        <div className=\"loading-overlay-text\">{text}</div>\n      </div>\n    </>\n  );\n};\n\nexport default LoadingOverlay;\n","import React, { useState, useEffect } from \"react\";\nimport SmallHeader from \"../General/SmallHeader\";\nimport TicTacBoard from \"./TicTacBoard\";\nimport useTicTac, { displayGame } from \"../../hooks/useTicTac\";\nimport io from \"socket.io-client\";\nimport LoadingOverlay from \"../General/LoadingOverlay\";\nimport { GameStatus } from \"../../gameLogic/game\";\n\nconst randomID = () => {\n  return Math.floor(Math.random() * 100000000000000);\n};\nlet playerSelf = { name: \"\", id: randomID(), value: \"\", score: 0, playerType: 'user' };\nlet playerOther = { name: \"\", id: \"\", value: \"\", score: 0, playerType: 'user'};\nlet socket = \"\";\n\nconst TicTacOnlinePage = ({ name }) => {\n  const [connected, setConnected] = useState(false);\n  const [matchFound, setMatchFound] = useState(false);\n  const game = useTicTac();\n\n  useEffect(() => {\n    playerSelf.name = name;\n    //Local  server port http://10.0.0.120:3005\n    //Server URL https://lochlancc-backend.herokuapp.com/\n    socket = io.connect(\"https://lochlancc-backend.herokuapp.com/\");\n\n    //Check if connected, wait for response. 'Ping'\n    socket.emit(\"ttt-connect\", playerSelf);\n    //'Pong', once response from server, we know connection is started\n    socket.on(\"ttt-connected\", () => {\n      setConnected(true);\n    });\n    //Once another player joins queue, match will be found.\n    socket.on(\"ttt-match-found\", players => {\n      setMatchFound(true);\n      const updatedPlayerSelf =\n        players[players.findIndex(p => p.id === playerSelf.id)];\n      const updatedPlayerOther =\n        players[players.findIndex(p => p.id !== playerSelf.id)];\n      playerSelf.value = updatedPlayerSelf.value;\n      playerOther = updatedPlayerOther;\n      startOnlineGame([playerSelf, updatedPlayerOther]);\n    });\n\n    socket.on(\"ttt-turn-taken\", ({ x, y }) => {\n      game.takeTurn(playerOther, [x, y]);\n    });\n    socket.on(\"ttt-playing-again\", () => {\n      game.playAgain();\n    })\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderGame = () => {\n    //game.status is only defined once game is started, so render display game if no game started yet.\n    if (game.status === undefined) {\n      return displayGame;\n    }\n    return game;\n  };\n\n  const renderLoading = () => {\n    if (!connected) {\n      return <LoadingOverlay text={\"Connecting to server...\"} />;\n    }\n    if (connected && !matchFound) {\n      return (\n        <LoadingOverlay text={\"Joined queue. Searching for other players...\"} />\n      );\n    }\n  };\n\n  //Perhaps create hook for online game functions?\n  const startOnlineGame = (playerSelf, playerOther) => {\n    game.start(playerSelf, playerOther);\n  };\n\n  const onSquareClick = (x, y) => {\n    if (game.status === GameStatus.draw || game.status === GameStatus.won) {\n      socket.emit('ttt-play-again', {playerOther});\n      game.playAgain();\n    } else {\n      try {\n        game.takeTurn(playerSelf, [x, y]);\n\n        //If no error from take turn, code below to server is executed\n        socket.emit(\"ttt-take-turn\", { playerSelf, playerOther, coords: { x, y } });\n      } catch (error) {}\n    }\n  };\n\n  return (\n    <>\n      {renderLoading()}\n      <SmallHeader />\n      <TicTacBoard game={renderGame()} onSquareClick={onSquareClick} myPlayer={playerSelf} />\n    </>\n  );\n};\n\nexport default TicTacOnlinePage;\n","import React, { useEffect } from \"react\";\nimport SmallHeader from \"../General/SmallHeader\";\nimport TicTacBoard from \"./TicTacBoard\";\nimport useTicTac from \"../../hooks/useTicTac\";\nimport { GameStatus } from \"../../gameLogic/game\";\n\nconst botGameConfig = {\n  board: [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null]\n  ],\n  ties: 0,\n  players: [\n    { id: \"1\", name: \"You\", value: \"x\", score: 0, playerType: 'user' },\n    { id: \"0\", name: \"Bot\", value: \"o\", score: 0, playerType: 'bot' }\n  ],\n  get currentPlayer() {\n    return this.players[0];\n  }\n};\n\nconst TicTacOfflineBotPage = () => {\n  const game = useTicTac();\n\n  const startGame = () => {\n    game.start(botGameConfig.players);\n  };\n\n  useEffect(startGame, []);\n\n  const renderGame = () => {\n    if (game.status === undefined) {\n      return botGameConfig;\n    }\n    return game;\n  };\n\n  const onSquareClick = (x, y) => {\n    if (game.status === GameStatus.draw || game.status === GameStatus.won) {\n      console.log('Game restarting');\n      console.log(game);\n      game.playAgain();\n\n      if (game.startingPlayer.id === botGameConfig.players[0].id) {\n        game.takeTurn(botGameConfig.players[1], game.bestMove(botGameConfig.players[1]));\n      }\n    } else {\n      try {\n        if (game.currentPlayer.id === botGameConfig.players[0].id) {\n          game.takeTurn(game.currentPlayer, [x, y]);\n          const bestBotMove = game.bestMove(botGameConfig.players[1]);\n          game.takeTurn(botGameConfig.players[1], bestBotMove);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <>\n      <SmallHeader />\n      <TicTacBoard game={renderGame()} onSquareClick={onSquareClick} myPlayer={botGameConfig.players[0]}/>\n    </>\n  );\n};\n\nexport default TicTacOfflineBotPage;\n","import React, { useState } from \"react\";\nimport SmallHeader from \"../General/SmallHeader\";\nimport TicTacSelectMode from \"./TicTacSelectMode\";\nimport \"../../styling/TTT/TicTacPage.css\";\nimport TicTacOfflineFriendPage from \"./TicTacOfflineFriendPage\";\nimport TicTacOnlinePage from \"./TicTacOnlinePage\";\nimport TicTacOfflineBotPage from \"./TicTacOfflineBotPage\";\n\nconst TicTacPage = () => {\n  const [onlineNick, setOnlineNick] = useState(\"\");\n  const [gameType, setGameType] = useState();\n\n  if (!gameType) {\n    return (\n      <>\n        <div className=\"ttt-page\">\n          <SmallHeader />\n          {/*<ErrorNotif text={\"testing hello 123\"}/>*/}\n          <TicTacSelectMode\n            onlineNick={onlineNick}\n            setOnlineNick={setOnlineNick}\n            setGameType={setGameType}\n          />\n        </div>\n      </>\n    );\n  }\n\n  if (gameType === \"offlineFriend\") {\n    return (\n      <>\n        <div className=\"ttt-page\">\n          <TicTacOfflineFriendPage />\n        </div>\n      </>\n    );\n  }\n  if (gameType === \"offlineBot\") {\n    return (\n      <>\n        <div className=\"ttt-page\">\n          <TicTacOfflineBotPage />\n        </div>\n      </>\n    );\n  }\n  if (gameType === \"online\") {\n    return (\n      <>\n        <div className=\"ttt-page\">\n          <TicTacOnlinePage name={onlineNick} />\n        </div>\n      </>\n    );\n  }\n};\n\nexport default TicTacPage;\n","import React, { useState } from \"react\";\nimport \"../../styling/C4/C4SelectMode.css\";\nimport SmallHeader from \"../General/SmallHeader\";\nimport ErrorNotif from \"../General/ErrorNotif\";\n\nconst C4SelectMode = ({ setGameType, setOnlineNick }) => {\n  const [currentNick, setCurrentNick] = useState(\"\");\n  const [displayError, setDisplayError] = useState(false);\n\n  const onNickChange = nick => {\n    setCurrentNick(nick);\n  };\n\n  const onOfflineClick = () => {\n    setGameType(\"offline\");\n  };\n\n  const onOfflineBotClick = () => {\n    setGameType('offlineBot')\n  };\n\n  const onOnlineClick = () => {\n    if (!currentNick && !displayError) {\n      setDisplayError(true);\n      setTimeout(() => {\n        setDisplayError(false);\n      }, 5000);\n    } else if (!currentNick) {\n    } else {\n      setGameType(\"online\");\n      setOnlineNick(currentNick);\n    }\n  };\n\n  const renderError = () => {\n    if (displayError) {\n      return <ErrorNotif text=\"You must enter a nickname to play Online!\" />;\n    }\n  };\n\n  return (\n    <>\n      {renderError()}\n      <SmallHeader />\n      <div className=\"C4-select-container\">\n        <div className=\"C4-select-text\">\n          <div className=\"C4-title-yellow\">C</div>\n          <div className=\"C4-title-red\">O</div>\n          <div className=\"C4-title-yellow\">N</div>\n          <div className=\"C4-title-red\">N</div>\n          <div className=\"C4-title-yellow\">E</div>\n          <div className=\"C4-title-red\">C</div>\n          <div className=\"C4-title-yellow\">T </div>\n          <div className=\"C4-title-red\">4</div>\n        </div>\n        <input\n          className=\"C4-nick-input\"\n          placeholder=\"Nick\"\n          type=\"text\"\n          value={currentNick}\n          onChange={e => onNickChange(e.target.value)}\n        />\n        <div className=\"C4-play C4-play-online\" onClick={onOnlineClick}>\n          Play Online!\n        </div>\n        <div className=\"C4-or-text\">or</div>\n        <div className=\"C4-play C4-play-offline\" onClick={onOfflineClick}>\n          Offline vs Friend!\n        </div>\n        <div className=\"C4-play C4-play-offlineBot\" onClick={onOfflineBotClick}>\n          Offline vs Bot!\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default C4SelectMode;\n","import React from \"react\";\nimport \"../../styling/C4/C4PlayerBox.css\";\nimport \"../../styling/General/PlayerBox.css\";\n\nconst TicTacPlayerBox = ({ side, name, game, id, value }) => {\n  const borderClass = id === game.currentPlayer.id ? \" player-box-border\" : \"\";\n\n  const renderMiniSquareValue = () => {\n    if (value === \"red\") {\n      return (\n        <>\n            <div className=\"c4-mini-piece-red c4-mini-piece\" />\n        </>\n      );\n    }\n\n    return (\n      <>\n          <div className=\"c4-mini-piece-yellow c4-mini-piece\" />\n      </>\n    );\n  };\n\n  return (\n    <span className={`C4 player-box-container ${side}${borderClass}`}>\n      <span className=\"user-icon-circle\">\n        <img alt=\"user icon\" src=\"/images/user-icon.svg\"/>\n      </span>\n      <div className=\"player-box-name\">{name}</div>\n      {renderMiniSquareValue()}\n    </span>\n  );\n};\n\nexport default TicTacPlayerBox;\n\n\n"," import React, { useEffect, useState } from \"react\";\nimport \"../../styling/C4/C4Board.css\";\nimport C4PlayerBox from \"./C4PlayerBox\";\nimport { GameStatus } from \"../../gameLogic/game\";\nimport Confetti from \"react-dom-confetti\";\n\nconst confettiConfig = {\n  angle: 90,\n  spread: \"360\",\n  startVelocity: \"35\",\n  elementCount: \"70\",\n  dragFriction: 0.12,\n  duration: 3000,\n  stagger: \"1\",\n  width: \"13px\",\n  height: \"13px\",\n  perspective: \"500px\",\n  colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n};\n\nconst C4Board = ({ game, onColumnClick, myPlayer }) => {\n  const [shouldRenderConfetti, setShouldRenderConfetti] = useState(false);\n\n  useEffect(() => {\n    if (\n      game.status === GameStatus.won &&\n      myPlayer?.value === game.winner.value\n    ) {\n      setShouldRenderConfetti(true);\n    }\n    if (game.status === GameStatus.inGame) {\n      setShouldRenderConfetti(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [game.status]);\n\n  const renderTileValue = ([x, y]) => {\n    const playerIDAtTile = game.board[x][y];\n    const playerAtTile = game.players.find(p => p.id === playerIDAtTile);\n\n    if (playerAtTile) {\n      return playerAtTile.value === \"red\" ? \"c4-tile-red\" : \"c4-tile-yellow\";\n    }\n\n    if (\n      game.status === GameStatus.inGame &&\n      myPlayer?.value === game.currentPlayer?.value &&\n      (y >= game.board[x].length - 1 || game.board[x][y + 1])\n    ) {\n      return game.currentPlayer.value === \"red\"\n        ? \"c4-next-active-tile-red\"\n        : \"c4-next-active-tile-yellow\";\n    }\n\n    return \"\";\n  };\n\n  const squareWinClass = (x, y) => {\n    if (game.status === GameStatus.won) {\n      for (const [winX, winY] of game.winningTiles) {\n        if (x === winX && y === winY) {\n          if (game.winner?.value === myPlayer.value) {\n            return \"c4-tile-won\";\n          }\n          return \"c4-tile-loss\";\n        }\n      }\n    }\n    return \"\";\n  };\n  const renderConfettiLogic = (x, y) => {\n    const isSquareWinning = () => {\n      for (let coords of game.winningTiles) {\n        if (coords[0] === x && coords[1] === y) {\n          return true;\n        }\n      }\n    };\n\n    return shouldRenderConfetti && isSquareWinning();\n  };\n\n  const renderBoard = () => {\n    return game.board.map((column, x) => (\n      <div\n        onClick={() => {\n          onColumnClick(x);\n        }}\n        key={x}\n        className={`c4-column x:${x}`}\n      >\n        {column.map((id, y) => {\n          return (\n            <div\n              className={`c4-tile x:${x} y:${y} ${renderTileValue([\n                x,\n                y\n              ])} ${squareWinClass(x, y)}`}\n              key={`x:${x} y:${y}`}\n              id={id}\n            >\n              <Confetti\n                active={renderConfettiLogic(x, y)}\n                config={confettiConfig}\n              />\n              <div className=\"c4-tile-inner\" />\n            </div>\n          );\n        })}\n      </div>\n    ));\n  };\n\n  const renderScore = () => {\n    return game.lastResults?.map((result, index) => {\n      if (result === \"tie\") {\n        return (\n          <img\n            key={index}\n            className=\"c4-tie-icon c4-score-icon\"\n            alt=\"small tie\"\n            src=\"/images/tie.svg\"\n          />\n        );\n      }\n      if (result.value === \"red\") {\n        return <div key={index} className=\"c4-score-icon c4-score-icon-red\" />;\n      }\n      return <div key={index} className=\"c4-score-icon c4-score-icon-yellow\" />;\n    });\n  };\n\n  return (\n    <>\n      <div className=\"c4-board-block\">\n        <C4PlayerBox\n          game={game}\n          name={game.players[0].name}\n          id={game.players[0].id}\n          value={game.players[0].value}\n          side=\"left\"\n        />\n        <div className=\"break\" />\n        <div className=\"c4-board\">{renderBoard()}</div>\n        <C4PlayerBox\n          game={game}\n          name={game.players[1].name}\n          id={game.players[1].id}\n          value={game.players[1].value}\n          side=\"right\"\n        />\n      </div>\n\n      <div className=\"c4-score-container\">{renderScore()}</div>\n    </>\n  );\n};\n\nexport default C4Board;\n","import Game, { GameStatus } from \"../gameLogic/game\";\n\nexport default class C4Game extends Game {\n  board = new Array(7).fill([]).map(() => [null, null, null, null, null, null]);\n  ties = 0;\n  winningTiles = [];\n  lastResults = [];\n  lastResultsAmount = 7;\n\n  constructor(players) {\n    if (players.length > 2) {\n      throw new Error(\"You have too many friends\");\n    }\n    super(players);\n\n    const startingPlayer = this.players.find(p => p.value === \"red\");\n    this.setCurrentPlayer(startingPlayer);\n  }\n\n  start = () => {\n    this.status = GameStatus.inGame;\n  };\n\n  lowestY = column => {\n    if (column[0] !== null) {\n      return null;\n    }\n    let lowestY = null;\n    for (let y = 0; y < column.length - 1; y++) {\n      if (column[y + 1] !== null) {\n        lowestY = y;\n        break;\n      }\n    }\n\n    if (lowestY === null) {\n      lowestY = column.length - 1;\n    }\n\n    return lowestY;\n  };\n\n  checkForDraw = board => {\n    if (this.status === GameStatus.won) {\n      return;\n    }\n    let nullCount = 0;\n    for (const column of board) {\n      for (const tileID of column) {\n        if (!tileID) {\n          nullCount += 1;\n        }\n      }\n    }\n    return nullCount === 0;\n  };\n\n  checkForWinAtPoint = (board, [x, y]) => {\n    let currentWinningTiles = [\n      [x, y],\n      [null, null],\n      [null, null],\n      [null, null]\n    ];\n    const searchDirections = [\n      [-1, 0],\n      [-1, -1],\n      [0, -1],\n      [-1, 1]\n    ];\n\n    const playerIDAtPoint = board[x][y];\n\n    if (playerIDAtPoint === null) {\n      return;\n    }\n\n    for (const direction of searchDirections) {\n      let matchCount = 1;\n\n      for (const directionMagnitude of [1, -1]) {\n        let currentX = x + direction[0] * directionMagnitude;\n        let currentY = y + direction[1] * directionMagnitude;\n        while (\n          currentX >= 0 &&\n          currentX < board.length &&\n          currentY >= 0 &&\n          currentY < board[x].length &&\n          board[currentX][currentY] === playerIDAtPoint\n        ) {\n          matchCount += 1;\n\n          currentWinningTiles[matchCount - 1] = [currentX, currentY];\n          currentX += direction[0] * directionMagnitude;\n          currentY += direction[1] * directionMagnitude;\n        }\n      }\n      if (matchCount >= 4) {\n        return [true, currentWinningTiles];\n      }\n    }\n    return [\n      false,\n      [\n        [null, null],\n        [null, null],\n        [null, null],\n        [null, null]\n      ]\n    ];\n  };\n\n  minimax = (\n    board,\n    isMaximising,\n    depth,\n    playerSelf,\n    playerOther,\n    alpha,\n    beta\n  ) => {\n    if (depth > 7) {\n      return (Math.random() - 1);\n    }\n    //isMaximising means it's playerSelf's turn to move, trying to get largest value of game (as value = gain)\n    if (isMaximising) {\n      let bestScore = -Infinity;\n      for (let x = 0; x < board.length; x++) {\n        const lowestY = this.lowestY(board[x]);\n        if (lowestY !== null) {\n          board[x][lowestY] = playerSelf.id;\n\n          let score;\n          if (this.checkForWinAtPoint(board, [x, lowestY])[0]) {\n            score = 22 - depth;\n          } else if (this.checkForDraw(board)) {\n            score = 0;\n          } else {\n            score = this.minimax(\n              board,\n              false,\n              depth + 1,\n              playerSelf,\n              playerOther,\n              alpha,\n              beta\n            );\n          }\n          board[x][lowestY] = null;\n\n          if (score > bestScore) {\n            bestScore = score;\n          }\n          if (score >= beta) {\n            return bestScore;\n          }\n          if (score > alpha) {\n            alpha = score;\n          }\n        }\n      }\n      return bestScore;\n    }\n    if (!isMaximising) {\n      let bestScore = Infinity;\n      for (let x = 0; x < board.length; x++) {\n        const lowestY = this.lowestY(board[x]);\n\n        if (lowestY !== null) {\n          board[x][lowestY] = playerOther.id;\n\n          let score;\n          if (this.checkForWinAtPoint(board, [x, lowestY])[0]) {\n            //If there is a win after playerOther takes turn then it must be a loss for playerSelf, so -1.\n            score = -22 + depth;\n          } else if (this.checkForDraw(board)) {\n            score = 0;\n          } else {\n            score = this.minimax(\n              board,\n              true,\n              depth + 1,\n              playerSelf,\n              playerOther,\n              alpha,\n              beta\n            );\n          }\n          board[x][lowestY] = null;\n\n          if (score < bestScore) {\n            bestScore = score;\n          }\n          if (score <= alpha) {\n            return bestScore;\n          }\n          if (score < beta) {\n            beta = score;\n          }\n        }\n      }\n      return bestScore;\n    }\n  };\n\n  bestMove = playerSelf => {\n    if (this.status !== GameStatus.inGame) {\n      throw new Error(\"Can't find best move of game if it isn't in progress\");\n    }\n    if (this.currentPlayer.id !== playerSelf.id) {\n      throw new Error(\n        \"It isn't this players turn so cannot find their best move. Please wait your turn\"\n      );\n    }\n\n    let bestMove = null;\n    const playerOther = this.players.find(p => p.id !== playerSelf.id);\n    let bestScore = -Infinity;\n    let alpha = -Infinity;\n    let beta = Infinity;\n\n    const boardClone = new Array(7)\n      .fill([null])\n      .map(() => new Array(6).fill(null));\n    //Loop to clone board to boardClone\n    for (let x = 0; x < this.board.length; x++) {\n      for (let y = 0; y < this.board[x].length; y++) {\n        boardClone[x][y] = this.board[x][y];\n      }\n    }\n\n    // This loops through all possible moves and gets value of game from those moves using minimax function\n    // Once done it will set best move to the move with the highest game value, if a tie then will chose first square\n    // that it loops through of the ties.\n\n    for (let x = 0; x < boardClone.length; x++) {\n      if (!boardClone[x][0]) {\n        const lowestY = this.lowestY(boardClone[x]);\n\n        boardClone[x][lowestY] = playerSelf.id;\n\n        let score;\n        if (this.checkForWinAtPoint(boardClone, [x, lowestY])[0]) {\n          score = 9;\n        } else if (this.checkForDraw(boardClone)) {\n          score = 0;\n        } else {\n          score = this.minimax(\n            boardClone,\n            false,\n            2,\n            playerSelf,\n            playerOther,\n            alpha,\n            beta\n          );\n        }\n\n        // console.log(x, score);\n\n        //Updates bestScore, if this score is greater (better for max player), and updates best move to x.\n        if (score > bestScore) {\n          bestScore = score;\n          bestMove = x;\n        }\n        if (score >= beta) {\n          return bestMove;\n        }\n        if (score > alpha) {\n          alpha = score;\n        }\n\n        //Sets boardClone square to null after checking value of game by playing at that square, cleaning up.\n        boardClone[x][lowestY] = null;\n      }\n    }\n    return bestMove;\n  };\n\n  takeTurn = (player, x) => {\n    if (this.status !== GameStatus.inGame) {\n      throw new Error(\"The game is not currently active\");\n    }\n\n    if (player.id !== this.currentPlayer.id) {\n      throw new Error(\"Whoops! It's not your turn yet\");\n    }\n    if (this.board[x][0]) {\n      throw new Error(\"Column is full\");\n    }\n\n    const lowestY = this.lowestY(this.board[x]);\n\n    this.board[x][lowestY] = player.id;\n    const [isGameWon, winningTiles] = this.checkForWinAtPoint(this.board, [\n      x,\n      lowestY\n    ]);\n\n    if (isGameWon) {\n      this.status = GameStatus.won;\n      const winningPlayer = this.players.find(p => p.id === player.id);\n      winningPlayer.score += 1;\n      this.winner = winningPlayer;\n      this.winningTiles = winningTiles;\n\n      this.lastResults.push(this.winner);\n      if (this.lastResults.length > this.lastResultsAmount) {\n        this.lastResults.splice(\n          0,\n          this.lastResults.length - this.lastResultsAmount\n        );\n      }\n    }\n    const isGameDrawn = this.checkForDraw(this.board);\n    if (isGameDrawn) {\n      this.ties += 1;\n      this.status = GameStatus.draw;\n\n      this.lastResults.push(\"tie\");\n      if (this.lastResults.length > this.lastResultsAmount) {\n        this.lastResults.splice(\n          0,\n          this.lastResults.length - this.lastResultsAmount\n        );\n      }\n    }\n\n    if (this.status === GameStatus.inGame) {\n      this.goToNextPlayer();\n    }\n  };\n\n  playAgain = () => {\n    this.winningSquares = [\n      [null, null],\n      [null, null],\n      [null, null],\n      [null, null]\n    ];\n    this.winner = null;\n    this.status = GameStatus.inGame;\n    this.board = new Array(7)\n      .fill([])\n      .map(() => [null, null, null, null, null, null]);\n\n    const otherPlayer = this.players.find(p => p.id !== this.currentPlayer.id);\n\n    this.setCurrentPlayer(otherPlayer);\n  };\n}\n","import useForceUpdate from \"./useForceUpdate\";\nimport C4 from \"../gameLogic/C4\";\n\nexport const displayGame = {\n  board: new Array(7).fill([]).map(() => [null, null, null, null, null, null]),\n  players: [\n    { name: \"Player 1\", value: \"red\", id: 1, score: 0 },\n    { name: \"Player 2\", value: \"yellow\", id: 2, score: 0 }\n  ],\n  ties: 0,\n  get currentPlayer() {\n    return this.players[0];\n  }\n};\n\nlet game = {};\n\nconst useC4 = () => {\n  const forceUpdate = useForceUpdate();\n\n  const start = players => {\n    let g = new C4(players);\n    g.start();\n    game = g;\n    forceUpdate();\n  };\n\n  const takeTurn = (player, x) => {\n    game.takeTurn(player, x);\n    forceUpdate();\n  };\n\n  const bestMove = player => {\n    return game.bestMove(player);\n  };\n\n  const leave = player => {\n    game.leave(player);\n    forceUpdate();\n  };\n\n  const playAgain = () => {\n    game.playAgain();\n    forceUpdate();\n  };\n\n  return {\n    start,\n    takeTurn,\n    bestMove,\n    playAgain,\n    leave,\n\n    winningTiles: game?.winningTiles,\n    lastResults: game?.lastResults,\n    ties: game?.ties,\n    board: game?.board,\n    players: game?.players,\n    winner: game?.winner,\n    status: game?.status,\n    currentPlayer: game?.currentPlayer\n  };\n};\n\nexport default useC4;\n","import React, { useEffect } from \"react\";\nimport C4Board from \"./C4Board\";\nimport useC4, { displayGame } from \"../../hooks/useC4\";\nimport SmallHeader from \"../General/SmallHeader\";\nimport { GameStatus } from \"../../gameLogic/game\";\n\nconst offlinePlayers = [\n  { name: \"Player 1\", value: \"red\", id: 1, score: 0 },\n  { name: \"Player 2\", value: \"yellow\", id: 2, score: 0 }\n];\n\nconst C4OfflinePage = () => {\n  const game = useC4();\n\n  const startGame = () => {\n    game.start(offlinePlayers);\n  };\n\n  useEffect(startGame, []);\n\n  const getGame = () => {\n    if (!game.players) {\n      return displayGame;\n    }\n    return game;\n  };\n\n  const onColumnClick = x => {\n    if (game.status === GameStatus.draw || game.status === GameStatus.won) {\n      game.playAgain();\n    } else {\n      try {\n        game.takeTurn(game.currentPlayer, x);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  return (\n    <>\n      <SmallHeader />\n      <C4Board\n        game={getGame()}\n        onColumnClick={onColumnClick}\n        myPlayer={game.currentPlayer}\n      />\n    </>\n  );\n};\n\nexport default C4OfflinePage;\n","import React, { useEffect } from \"react\";\nimport C4Board from \"./C4Board\";\nimport useC4, { displayGame } from \"../../hooks/useC4\";\nimport SmallHeader from \"../General/SmallHeader\";\nimport { GameStatus } from \"../../gameLogic/game\";\n\nconst botGameConfig = {\n  board: [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null]\n  ],\n  ties: 0,\n  players: [\n    { id: \"1\", name: \"You\", value: \"red\", score: 0, playerType: \"user\" },\n    { id: \"0\", name: \"Bot\", value: \"yellow\", score: 0, playerType: \"bot\" }\n  ],\n  get currentPlayer() {\n    return this.players[0];\n  }\n};\n\nconst C4OfflineBotPage = () => {\n  const game = useC4();\n\n  const startGame = () => {\n    game.start(botGameConfig.players);\n  };\n\n  useEffect(startGame, []);\n\n  const getGame = () => {\n    if (!game.players) {\n      return displayGame;\n    }\n    return game;\n  };\n\n  const onColumnClick = x => {\n    if (game.status === GameStatus.draw || game.status === GameStatus.won) {\n      game.playAgain();\n      try {\n        const bestMove = game.bestMove(botGameConfig.players[1]);\n        game.takeTurn(botGameConfig.players[1], bestMove);\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      if (game.board[x][0] !== null) {\n        console.error(\"Column is full!\");\n        return;\n      }\n\n      try {\n        game.takeTurn(botGameConfig.players[0], x);\n      } catch (error) {\n        console.error(error);\n      }\n      try {\n        const bestMove = game.bestMove(botGameConfig.players[1]);\n        console.log(bestMove);\n        game.takeTurn(botGameConfig.players[1], bestMove);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return (\n    <>\n      <SmallHeader />\n      <C4Board\n        game={getGame()}\n        onColumnClick={onColumnClick}\n        myPlayer={game.currentPlayer}\n      />\n      {/*<div style={{backgroundColor: 'Red'}} onClick={() => console.log(game.bestMove(game.currentPlayer))}> Click me! </div>*/}\n    </>\n  );\n};\n\nexport default C4OfflineBotPage;\n","import React, { useEffect, useState } from 'react';\nimport C4Board from \"./C4Board\";\nimport io from 'socket.io-client';\nimport {displayGame} from \"../../hooks/useC4\";\nimport useC4 from \"../../hooks/useC4\";\nimport LoadingOverlay from \"../General/LoadingOverlay\";\nimport {GameStatus} from \"../../gameLogic/game\";\nimport SmallHeader from \"../General/SmallHeader\";\n\nlet socket = '';\nconst randomID = () => {\n  return Math.floor(Math.random() * 100000000000000);\n};\nlet playerSelf = { name: \"\", id: randomID(), value: \"\", score: 0 };\nlet playerOther = { name: \"\", id: \"\", value: \"\", score: 0 };\n\n\nconst C4OnlinePage = ({name}) => {\n  const [connected, setConnected] = useState(false);\n  const [matchFound, setMatchFound] = useState(false);\n\n  const game = useC4();\n  playerSelf.name = name;\n\n  useEffect(() => {\n    //Local  server port http://10.0.0.126:3005\n    //Server URL https://lochlancc-backend.herokuapp.com/\n    socket = io('https://lochlancc-backend.herokuapp.com/');\n\n    socket.emit('C4-connect', playerSelf);\n    socket.on('C4-connected', () => {\n      setConnected(true)\n    });\n    socket.on('C4-match-found', (playersData) => {\n      const updatedPlayerSelf =\n        playersData[playersData.findIndex(p => p.id === playerSelf.id)];\n      const updatedPlayerOther =\n        playersData[playersData.findIndex(p => p.id !== playerSelf.id)];\n      playerSelf.value = updatedPlayerSelf.value;\n      playerOther = updatedPlayerOther;\n      game.start(playersData);\n\n      setMatchFound(true);\n    });\n    socket.on('C4-turn-taken', (x) => {\n      game.takeTurn(playerOther, x);\n    });\n\n    socket.on('C4-playing-again', () => {\n      game.playAgain();\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getGame = () => {\n    if (!game.players) {\n      return displayGame;\n    }\n    return game;\n  };\n\n  const onColumnClick = x => {\n    if (game.status === GameStatus.draw || game.status === GameStatus.won) {\n      socket.emit('C4-play-again', {playerOther});\n      game.playAgain();\n    } else {\n      try {\n        game.takeTurn(playerSelf, x);\n        socket.emit('C4-take-turn', {x, playerOther})\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  const renderLoading = () => {\n    if (!connected) {\n      return <LoadingOverlay text={\"Connecting to server...\"} />;\n    }\n    if (connected && !matchFound) {\n      return (\n        <LoadingOverlay text={\"Joined queue. Searching for other players...\"} />\n      );\n    }\n  };\n\n  return (\n    <div>\n      {renderLoading()}\n      <SmallHeader/>\n      <C4Board game={getGame()} onColumnClick={onColumnClick} myPlayer={playerSelf} />\n    </div>\n  )\n};\n\nexport default C4OnlinePage;","import React, { useState } from \"react\";\nimport C4SelectMode from \"./C4SelectMode\";\nimport C4OfflinePage from \"./C4OfflinePage\";\nimport C4OfflineBotPage from \"./C4OfflineBotPage\";\nimport C4OnlinePage from \"./C4OnlinePage\";\nimport '../../styling/C4/C4Page.css';\n\nconst C4Page = () => {\n  const [gameType, setGameType] = useState(null);\n  const [onlineNick, setOnlineNick] = useState(\"\");\n\n  if (!gameType) {\n    return (\n      <div className=\"C4-page\">\n        <C4SelectMode setGameType={setGameType} setOnlineNick={setOnlineNick} />\n      </div>\n    );\n  } else if (gameType === \"online\") {\n    return (\n      <div className=\"C4-page\">\n        <C4OnlinePage name={onlineNick} />\n      </div>\n    );\n  } else if (gameType === 'offlineBot') {\n    return (\n      <div className=\"C4-page\">\n        <C4OfflineBotPage name={onlineNick} />\n      </div>\n    );\n  }\n  return (\n    <div className=\"C4-page\">\n      <C4OfflinePage />\n    </div>\n  );\n};\n\nexport default C4Page;\n","//Functions needed;\n\n//Functions for user input;\n//Turn;\n\n//Other Functions\n//Create food\n//Move snake\n//Eat Food\n\nexport const SnakeGameStatus = {\n  preGame: Symbol(\"preGame\"),\n  inGame: Symbol(\"inGame\"),\n  endedGame: Symbol(\"endedGame\")\n};\n\nclass SnakeGame {\n  constructor(boardWidth, boardHeight, cooldown) {\n    this.newGameSetup(boardWidth, boardHeight, cooldown);\n    this.highScore = 0;\n  }\n\n  newGameSetup = (boardWidth, boardHeight, cooldown) => {\n    this.direction = [0, -1];\n    this.debouncedDirection = [0, -1];\n    this.status = SnakeGameStatus.preGame;\n    this.moveCoolDown = cooldown;\n    this.score = 0;\n    this.isPaused= false;\n    //Board width and height must be odd so snake can start in middle.\n    this.boardWidth = boardWidth;\n    this.boardHeight = boardHeight;\n    //Array of positions of snake, from tail to head.\n    this.position = [\n      [(boardWidth - 1) / 2, (boardHeight + 3) / 2],\n      [(boardWidth - 1) / 2, (boardHeight + 1) / 2],\n      [(boardWidth - 1) / 2, (boardHeight - 1) / 2]\n    ];\n    //Board is just used for visual presentation of game. Not needed in logic.\n    this.board = new Array(boardWidth)\n      .fill(null)\n      .map(() => new Array(boardHeight).fill(null));\n    this.board[(boardWidth - 1) / 2][(boardHeight + 3) / 2] = \"snake\";\n    this.board[(boardWidth - 1) / 2][(boardHeight + 1) / 2] = \"snake\";\n    this.board[(boardWidth - 1) / 2][(boardHeight - 1) / 2] = \"snake\";\n    this.food = [[null, null], this.generateID()];\n\n    const startFood = this.newFoodPos();\n    this.food[0] = startFood;\n    this.board[startFood[0]][startFood[1]] = \"food\";\n  };\n\n  generateID = () => {\n    return Math.floor(Math.random() * 10 ** 10);\n  };\n\n  shiftSnake = () => {\n    const currentHead = this.position[this.position.length - 1];\n    const newHead = [\n      currentHead[0] + this.direction[0],\n      currentHead[1] + this.direction[1]\n    ];\n    const currentTail = this.position[0];\n\n    const foodX = this.food[0][0];\n    const foodY = this.food[0][1];\n\n    if (\n      this.debouncedDirection[0] !== -this.direction[0] &&\n      this.debouncedDirection[1] !== -this.direction[1]\n    ) {\n      this.direction = this.debouncedDirection;\n    }\n\n    //Detect game ending: Move outside board or onto own snake.\n    if (\n      newHead[0] >= this.boardWidth ||\n      newHead[1] >= this.boardHeight ||\n      newHead[0] < 0 ||\n      newHead[1] < 0 ||\n      (this.board[newHead[0]][newHead[1]] === \"snake\" &&\n        !(newHead[0] === currentTail[0] && newHead[1] === currentTail[1]))\n    ) {\n      this.status = SnakeGameStatus.endedGame;\n      if (this.score > this.highScore) {\n        this.highScore = this.score;\n      }\n      return;\n    }\n\n    //Removing tail. If there is food then it doesn't remove tail giving the effect of growing one back.\n    if (newHead[0] === foodX && newHead[1] === foodY) {\n      this.score += 5;\n      //No clean up of old food needed, as new snake head overwrites the old food on board.\n      const newFood = this.newFoodPos();\n      this.food[0] = newFood;\n      this.board[newFood[0]][newFood[1]] = \"food\";\n    } else {\n      this.board[currentTail[0]][[currentTail[1]]] = null;\n      this.position.splice(0, 1);\n    }\n\n    //Shifting snake head - only runs if there is no error:\n    this.position.push(newHead);\n    this.board[newHead[0]][[newHead[1]]] = \"snake\";\n  };\n\n\n  newFoodPos = () => {\n    const foodX = Math.floor(Math.random() * this.boardWidth);\n    const foodY = Math.floor(Math.random() * this.boardHeight);\n\n    if (this.board[foodX][foodY] !== null) {\n      return this.newFoodPos();\n    }\n    return [foodX, foodY];\n  };\n\n  start = () => {\n    this.status = SnakeGameStatus.inGame;\n  };\n\n  turn = (x, y) => {\n    this.debouncedDirection = [x, y];\n  };\n\n  playAgain = () => {\n    this.newGameSetup(this.boardWidth, this.boardHeight, this.moveCoolDown);\n  };\n}\n\nexport default SnakeGame;\n","import SnakeGame, { SnakeGameStatus } from \"../gameLogic/Snake\";\nimport useForceUpdate from \"./useForceUpdate\";\nimport { useEffect } from \"react\";\n\nlet firstRender = true;\nlet game = {};\n\nconst useSnake = (boardWidth, boardHeight, cooldown) => {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    firstRender = false;\n  }, []);\n\n  if (firstRender) {\n    game = new SnakeGame(boardWidth, boardHeight, cooldown);\n  }\n\n  //Function is called here instead of in shiftSnake so board will be updated after snake is shifted.\n  const moveLoop = () => {\n    if (game.status !== SnakeGameStatus.inGame || game.isPaused) {\n      return;\n    }\n    game.shiftSnake();\n\n    forceUpdate();\n    setTimeout(() => {\n      moveLoop();\n    }, game.moveCoolDown);\n    forceUpdate();\n  };\n\n  const togglePause = () => {\n    if (game.isPaused) {\n      game.isPaused = false;\n      moveLoop();\n      return;\n    }\n    game.isPaused = true;\n    forceUpdate();\n  };\n\n\n  const start = (boardWidth, boardHeight, cooldown) => {\n    game.start(boardWidth, boardHeight, cooldown);\n    moveLoop();\n    forceUpdate();\n  };\n\n  const turn = (x, y) => {\n    game.turn(x, y);\n    forceUpdate();\n  };\n\n  const playAgain = () => {\n    game.playAgain();\n    forceUpdate();\n  };\n\n\n  return {\n    start,\n    turn,\n    playAgain,\n    togglePause,\n\n    position: game.position,\n    status: game.status,\n    board: game.board,\n    score: game.score,\n    highScore: game.highScore,\n    food: game.food,\n    isPaused: game.isPaused\n  };\n};\n\nexport default useSnake;\n","import { useEffect } from 'react';\n\nconst useSnakeSwipeArrowTurn = (game) => {\n  useEffect(() => {\n    const onArrowClick = event => {\n      if (event.keyCode === 38) {\n        game.turn(0, -1);\n      } else if (event.keyCode === 40) {\n        game.turn(0, 1);\n      } else if (event.keyCode === 37) {\n        game.turn(-1, 0);\n      } else if (event.keyCode === 39) {\n        game.turn(1, 0);\n      }\n    };\n\n    document.addEventListener(\"keydown\", onArrowClick);\n    document.addEventListener('touchstart', handleTouchStart, false);\n    document.addEventListener('touchmove', handleTouchMove, false);\n    //This last event listener prevents scrolling\n    document.body.addEventListener('touchmove', (e) => { e.preventDefault()}, { passive: false });\n\n    document.body.onkeydown = function(e) {\n      e.preventDefault();\n    };\n\n    let xDown = null;\n    let yDown = null;\n\n    function getTouches(evt) {\n      return evt.touches ||             // browser API\n        evt.originalEvent.touches; // jQuery\n    }\n\n    function handleTouchStart(evt) {\n      const firstTouch = getTouches(evt)[0];\n      xDown = firstTouch.clientX;\n      yDown = firstTouch.clientY;\n    }\n\n    function handleTouchMove(evt) {\n\n      if ( ! xDown || ! yDown ) {\n        return;\n      }\n\n      let xUp = evt.touches[0].clientX;\n      let yUp = evt.touches[0].clientY;\n\n      let xDiff = xDown - xUp;\n      let yDiff = yDown - yUp;\n\n      if ( Math.abs( xDiff ) > Math.abs( yDiff ) ) {/*most significant*/\n        if ( xDiff > 0 ) {\n          /* left swipe */\n          game.turn(-1, 0);\n        } else {\n          /* right swipe */\n          game.turn(1, 0);\n        }\n      } else {\n        if ( yDiff > 0 ) {\n          /* up swipe */\n          game.turn(0, -1);\n        } else {\n          /* down swipe */\n          game.turn(0, 1);\n        }\n      }\n      /* reset values */\n      xDown = null;\n      yDown = null;\n    }\n\n\n\n    return () => document.removeEventListener(\"keydown\", onArrowClick);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n\n\n\n};\n\nexport default useSnakeSwipeArrowTurn;","import React, { useState, useEffect } from \"react\";\nimport useSnake from \"../../hooks/useSnake\";\nimport useSnakeSwipeArrowTurn from \"../../hooks/useSnakeSwipeArrowTurn\";\nimport \"../../styling/Snake/SnakeBoard.css\";\nimport { SnakeGameStatus } from \"../../gameLogic/Snake\";\n\nconst SnakeBoard = () => {\n  const countdownLength = 3;\n  let [gameStarting, setGameStarting] = useState(false);\n  //Set countdown duration by changing starting value below\n  let [countdown, setCountdown] = useState(countdownLength);\n\n  let game = useSnake(21, 15, 140);\n  useSnakeSwipeArrowTurn(game);\n\n  const isPreGame = game.status === SnakeGameStatus.preGame;\n  const isGameOver = game.status === SnakeGameStatus.endedGame;\n  const isInGame = game.status === SnakeGameStatus.inGame;\n  // console.log(game.isPaused);\n  const snakeClass = isGameOver || game.isPaused ? 's-grey' : '';\n\n  useEffect(() => {\n    if (gameStarting) {\n      setTimeout(() => {\n        setCountdown(countdown - 1);\n      }, 600);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [gameStarting]);\n\n  useEffect(() => {\n    if (gameStarting) {\n      setTimeout(() => {\n        setCountdown(countdown - 1);\n      }, 600);\n    }\n\n    if (countdown <= 0 && isPreGame) {\n      setGameStarting(false);\n\n      try {\n        game.start();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [countdown]);\n\n  //This event listener allows user to use enter or spacebar to navigate through menu\n  document.body.onkeyup = function(e){\n    if(e.code === 'Space' || e.code === 'Enter'){\n      if (isPreGame) {\n        setGameStarting(true);\n      }\n      else if (isGameOver) {\n        handleBoardClick()\n      }\n      else if (isInGame) {\n        game.togglePause();\n      }\n\n    }\n  };\n\n\n  const renderBoard = () => {\n    return game.board.map((columnx, indexX) => (\n      <div key={`${indexX}`} className=\"s-column\">\n        {columnx.map((celly, indexY) => {\n          if (celly === \"snake\" && !isPreGame) {\n            return (\n              <div\n                key={`${indexX} ${indexY}`}\n                className={`s-cell-snake s-cell ${snakeClass}`}\n              />\n            );\n          }\n          if (celly === \"food\" && !isPreGame) {\n            return (\n              <img\n                key={game.food[1]}\n                className={`s-cherry`}\n                alt=\"cherry\"\n                src=\"/images/snake-cherry.svg\"\n              />\n            );\n          }\n\n          return (\n            <div key={`${indexX} ${indexY}`} className=\"s-cell-empty s-cell\" />\n          );\n        })}\n      </div>\n    ));\n  };\n\n  const renderMenu = () => {\n    if (!gameStarting && game.status === SnakeGameStatus.preGame) {\n      return (\n        <div\n          onClick={() => {\n            setGameStarting(true);\n          }}\n          className=\"s-center-text\"\n        >\n          Start!\n        </div>\n      );\n    }\n\n    if (isGameOver) {\n      return (\n        <>\n          <div className=\"s-center-text\">Game Over!</div>\n        </>\n      );\n    }\n  };\n\n  const renderCountDown = () => {\n    if (gameStarting === true && game.status === SnakeGameStatus.preGame) {\n      return <div className=\"s-center-text\">{countdown}</div>;\n    }\n  };\n\n  const handleBoardClick = () => {\n    if (isGameOver) {\n      setCountdown(countdownLength);\n      game.playAgain()\n    }\n  };\n\n  return (\n    <>\n      <div onClick={handleBoardClick} className=\"s-board-box\">\n        <div className=\"s-menu-container\">\n          {renderMenu()}\n          {renderCountDown()}\n        </div>\n\n        <div className=\"s-board\">{renderBoard()}</div>\n      </div>\n      <div className=\"s-score\">\n        <span className=\"s-left-score\">{`Score: ${game.score}`}</span>\n        <span className=\"s-right-score\">{`High Score: ${game.highScore}`}</span>\n      </div>\n    </>\n  );\n};\n\nexport default SnakeBoard;\n","import React from \"react\";\nimport SnakeBoard from \"./SnakeBoard\";\nimport SmallHeader from \"../General/SmallHeader\";\nimport '../../styling/Snake/SnakePage.css'\n\n\nconst SnakePage = () => {\n  return (\n    <div className=\"snake-page\">\n      <SmallHeader />\n      <div className=\"s-board-container\">\n        <SnakeBoard />\n      </div>\n    </div>\n  );\n};\n\nexport default SnakePage;\n","import React from \"react\";\nimport GameSelection from \"./GameSelection\";\nimport \"../styling/App.css\";\nimport TicTacPage from \"./TTT/TicTacPage\";\nimport C4Page from \"./C4/C4Page\";\nimport SnakePage from \"./Snake/SnakePage\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <div className=\"app\">\n            <div className=\"main-header\">\n              <span className=\"name\">\n                <a className=\"nostyle header-link\" href=\"/\">\n                  Arcade || Lochlan.cc\n                </a>\n              </span>\n            </div>\n\n            <div className=\"main\">\n              <GameSelection />\n            </div>\n\n            {/*<div className=\"main-footer\">*/}\n            {/*  <div className=\"main-footer-text\">Lochlan Bennett-Odlum</div>*/}\n            {/*</div>*/}\n          </div>\n        </Route>\n\n        <Route path=\"/ttt\">\n          <TicTacPage />\n        </Route>\n\n        <Route path=\"/connect4\">\n          <C4Page />\n        </Route>\n\n        <Route path=\"/snake\">\n          <SnakePage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}